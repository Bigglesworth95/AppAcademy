Write a method same_char_collapse that takes in a string and returns a collapsed version of the string. 
To collapse the string, we repeatedly delete 2 adjacent characters that are the same until there are no such adjacent characters. 
If there are multiple pairs that can be collapsed, delete the leftmost pair. 
For example, we take the following steps to collapse "zzzxaaxy": zzzxaaxy -> zxaaxy -> zxxy -> zy


def same_char_collapse(str)
count = 0 
  str.each_char.with_index do |let, idx|
    if str[idx] == str[idx +1]
      newStr = str[0...idx]+str[idx+2..-1]
      puts newStr
      return same_char_collapse(newStr)
    end
  end
  return str
      
end

puts same_char_collapse("zzzxaaxy")   #=> "zy"
# because zzzxaaxy -> zxaaxy -> zxxy -> zy


puts same_char_collapse("uqrssrqvtt") #=> "uv"
# because uqrssrqvtt -> uqrrqvtt -> uqqvtt -> uvtt -> uv

==== More Readable Code ====
def same_char_collapse(str)
str = str.split("")
  str.each_with_index do |let, idx|
    if str[idx] == str[idx+1]
      str[idx] = ""
      str[idx+1] = ""
      return same_char_collapse(str.join(""))
    end
  end
  return str.join("")
      
end

puts same_char_collapse("zzzxaaxy")   #=> "zy"
# because zzzxaaxy -> zxaaxy -> zxxy -> zy


puts same_char_collapse("uqrssrqvtt") #=> "uv"
# because uqrssrqvtt -> uqrrqvtt -> uqqvtt -> uvtt -> uv
